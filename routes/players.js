var express = require('express');



const playerRouter = express.Router();
const config = require('../config');
const formatLinkHeader = require('format-link-header');
const Player = require('../models/user');
const mongoose = require('mongoose');
const ObjectId = mongoose.Types.ObjectId;
const debug = require('debug');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const moment = require('moment');
const secretKey = process.env.SECRET_KEY || 'changeme';

const saltRounds = 10;




/**
 * @api {get} /api/player List Players
 * @apiName RetrievePlayers
 * @apiGroup Player
 * @apiVersion 1.0.0
 * @apiDescription Retrieves a paginated list of players ordered by their pseudo (in alphabetical order) with optional filters.
 *
 * @apiUse PlayerInResponseBody
 *
 *
 * @apiExample Example
 *     GET /api/player?gender=male&page=2&pageSize=30 HTTP/1.1
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *    // TO DO
 *     Link: &lt;https://nameless-mountain-35811.herokuapp.com/api/player?gender=male&page=2&pageSize=30;; rel="first prev"
 *
 *  [
 *    {
 *        "_id": "5dc2ea214d7a71492043832d",
 *        "firstName": "Lucien",
 *        "lastName": "Pochon",
 *        "pseudo": "LP",
 *        "birthDate": "1995-12-17T02:24:00.000Z",
 *        "picture": "https://picture",
 *        "gender": "male",
 *        "createdAt": "2019-11-06T15:43:29.890Z",
 *        "__v": 0
 *    },
 *    {
 *        "_id": "5dc19f3943779a32c4f0fbb4",
 *        "firstName": "Elisa",
 *        "lastName": "Biver",
 *        "pseudo": "EB",
 *        "birthDate": "1995-12-17T02:24:00.000Z",
 *        "picture": "https://picture",
 *        "gender": "female",
 *        "createdAt": "2019-11-05T16:11:37.988Z",
 *        "__v": 0
 *    }
 *  ]
 */




/* GET users listing by lastname */
playerRouter.get('/', function (req, res, next) {

  //Count total players matching the URL query parameters
  const countQuery = Player.find();
  countQuery.count(function (err, total){
    if (err) {
      return next(err);
    }
  // Prepare the initial database query from the URL query parameters
  let query = Player.find();

  // Parse pagination parameters from URL query parameters
  const { page, pageSize } = getPaginationParameters(req)

  // Filter players by gender
  if (req.query.gender) {
    switch (req.query.gender){
      case 'female':
        console.log('female filter');
        query = query.where('gender').equals('female');
        break;
      case 'male':
        query = query.where('gender').equals('male'); 
        break;
    } 
  }

  // Filter players by age 
  if (req.query.age) {
  
    const age = parseInt(req.query.age, 10);

    const upperBound = moment().subtract(age, 'years').toDate();
    const lowerBound = moment(upperBound).subtract(1, 'year').toDate();
    
    query = query.where('birthDate').gte(lowerBound).lte(upperBound);

  }
  

  // Apply the pagination to the database query
  query = query.skip((page - 1) * pageSize).limit(pageSize);

  // Add the Link header to the response
  addLinkHeader('/api/player', page, pageSize, total, res);
  query.sort('pseudo').exec(function(err, users) {
    if (err) {
      return next(err);
    }
    res.send(users);
    });
  }); 

/*   Player.find().sort('lastName').exec(function(err, users) {
    if (err) {
      return next(err);
    }
    res.send(users);
  }); */
});



/**
 * @api {post} /api/player Create a player
 * @apiName CreatePlayer
 * @apiGroup Player
 * @apiVersion 1.0.0
 * @apiDescription Registers a new player.
 *
 * @apiUse PlayerInRequestBody
 * @apiUse PlayerInResponseBody
 * @apiUse PlayerValidationError
 * @apiSuccess (Response body) {String} id A unique identifier for the player generated by the server
 *
 * @apiExample Example
 *     POST /api/player HTTP/1.1
 *     Content-Type: application/json
 *
 * {
 *       "firstName": "Lucien",
 *       "lastName": "Pochon",
 *       "pseudo": "Kinoa",
 *       "password": "changeme"
 *       "birthDate": "1995-12-17T02:24:00.000Z",
 *       "picture": "https://blalba",
 *       "gender": "male",
 *  }
 *
 *
 * @apiSuccessExample 201 Created
 *     HTTP/1.1 201 Created
 *     Content-Type: application/json
 *     Location: https://evening-meadow-25867.herokuapp.com/api/movies/58b2926f5e1def0123e97281
 *
 *    {
 *        "_id": "5dc2ea214d7a71492043832d",
 *        "firstName": "Lucien",
 *        "lastName": "Pochon",
 *        "pseudo": "LPO",
 *        "birthDate": "1995-12-17T02:24:00.000Z",
 *        "picture": "https://picture",
 *        "gender": "male",
 *        "createdAt": "2019-11-06T15:43:29.890Z",
 *        "__v": 0
 *    }
 */

/* POST one player */
playerRouter.post('/', function (req, res, next) {

  const plainPassword = req.body.password;

    // hashing the password for security
    bcrypt.hash(plainPassword, saltRounds, function(err, hashedPassword) {
    if (err) {
      return next(err);
    }

      const newPlayer = new Player(req.body);
      newPlayer.password = hashedPassword;

      newPlayer.save(function (err, savedPlayer) {
        if (err) {
          return next(err);
        }

        res.send(savedPlayer);
      });
  });
});






/**
 * @api {get} /api/player/:id Retrieve a player
 * @apiName RetrievePlayer
 * @apiGroup Player
 * @apiVersion 1.0.0
 * @apiDescription Retrieves one player.
 *
 * @apiUse PlayerIdInUrlPath
 * @apiUse PlayerInResponseBody
 * @apiUse PlayerNotFoundError
 *
 * @apiExample Example
 *     GET /api/player/5dc2ea214d7a71492043832d HTTP/1.1
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *   {
 *       "_id": "5dc2ea214d7a71492043832d",
 *       "firstName": "Lucien",
 *       "lastName": "Pochon",
 *       "pseudo": "LPO",
 *       "birthDate": "1995-12-17T02:24:00.000Z",
 *       "picture": "https://blalba",
 *       "gender": "male",
 *       "createdAt": "2019-11-06T15:43:29.890Z",
 *       "__v": 0
 *     }
 */
  
/* GET one player by id */
playerRouter.get('/:id', loadPlayerFromParamsMiddleware, function (req, res, next) {

  res.send(req.player);
});


/**
 * @api {patch} /api/player/:id Partially update a player
 * @apiName PartiallyUpdatePlayer
 * @apiGroup Player
 * @apiVersion 1.0.0
 * @apiDescription Partially updates a player's data
 * @apiUse PlayerInRequestBody
 * @apiUse PlayerInResponseBody
 * @apiUse PlayerNotFoundError
 * @apiUse PlayerValidationError
 *
 * @apiExample Example
 *     PATCH /api/player/5dc2ea214d7a71492043832d HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *       "pseudo": Kohala
 *     }
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *   {
 *       "_id": "5dc2ea214d7a71492043832d",
 *       "firstName": "Lucien",
 *       "lastName": "Pochon",
 *       "pseudo": "Kohala",
 *       "birthDate": "1995-12-17T02:24:00.000Z",
 *       "picture": "https://blalba",
 *       "gender": "male",
 *       "createdAt": "2019-11-06T15:43:29.890Z",
 *       "__v": 0
 *     }
 */

/* PATCH one player by id  */
playerRouter.patch('/:id', authenticate, loadPlayerFromParamsMiddleware, function (req, res, next) {

  Player.findById(req.params.id).exec(async function(err, player) {
    
    if (err) {
      return next(err);
    }
    // Check authorization
    // Compare current id with id player 
    if (req.currentUserId !== player.id.toString()) {
      return res.status(403).send('Do not patch another player, not cool.')
    }

    try {

      // Update only properties present in the request body
      if (req.body.firstName !== undefined) {
        req.player.firstName = req.body.firstName;
      }

      if (req.body.lastName !== undefined) {
        req.player.lastName = req.body.lastName;
      }

      if (req.body.pseudo !== undefined) {
        req.player.pseudo = req.body.pseudo;
      }
      // promise to wait for the hash to be done 
      if (req.body.password !== undefined) {
        req.player.password = await bcrypt.hash(req.body.password, saltRounds);
      }

      if (req.body.birthDate !== undefined) {
        req.player.birthDate = req.body.birthDate;
      }

      if (req.body.picture !== undefined) {
        req.player.picture = req.body.picture;
      }

      if (req.body.gender !== undefined) {
        req.player.gender = req.body.gender;
      }

      req.player.save(function (err, savedPlayer) {
        if (err) {
          return next(err);
        }

        debug(`Updated Player "${savedPlayer.pseudo}"`);
        res.send(savedPlayer);
      });

    } catch (err) {
      next(err);
    }
  });  


});


/**
 * @api {delete} /api/player/:id Delete a player
 * @apiName DeletePlayer
 * @apiGroup Player
 * @apiVersion 1.0.0
 * @apiDescription Permanently deletes a player.
 *
 * @apiUse PlayerIdInUrlPath
 * @apiUse PlayerNotFoundError
 *
 * @apiExample Example
 *     DELETE /api/player/5dc2ea214d7a71492043832d HTTP/1.1
 *
 * @apiSuccessExample 204 No Content
 *     HTTP/1.1 204 No Content
 */


/* DELETE one player by id  */ 
playerRouter.delete('/:id', authenticate, loadPlayerFromParamsMiddleware, function (req, res, next) {

  
  Player.findById(req.params.id).exec(function(err, player) {
    
    if (err) {
      return next(err);
    }
    // Check authorization
    // Compare current id with id player 
    if (req.currentUserId !== player.id.toString()) {
      return res.status(403).send('Do not delete another player, not cool.')
    }

     debug(`Deleted Player "${req.player.pseudo}"`);
     res.sendStatus(204);
  });



});




/* LOGIN  */ 

playerRouter.post('/login', function(req, res, next) {
  // Find the user by pseudo.
  Player.findOne({ pseudo: req.body.pseudo }).exec(function(err, player) {
    if (err) { return next(err); }
    else if (!player) { return res.sendStatus(401); }
    // Validate the password.
    bcrypt.compare(req.body.password, player.password, function(err, valid) {
      if (err) { return next(err); }
      else if (!valid) { return res.sendStatus(401); }
      // Generate a valid JWT which expires in 7 days.
      const exp = (new Date().getTime() + 7 * 24 * 3600 * 1000) / 1000;
      const claims = { sub: player._id.toString(), exp: exp };
      jwt.sign(claims, secretKey, function(err, token) {
        if (err) { return next(err); }
        res.send({ token: token }); // Send the token to the client.
      });
    });
  })
});

/* catch the id and check it */
function loadPlayerFromParamsMiddleware(req, res, next) {

  const playerId = req.params.id;
  if (!ObjectId.isValid(playerId)) {
    return PlayerNotFound(res, playerId);
  }

  let query = Player.findById(playerId)

  query.exec(function (err, player) {
    if (err) {
      return next(err);
    } else if (!player) {
      return playerNotFound(res, playerId);
    }

    req.player = player;
    next();
  });
}

/* send an error message if the id is not found */
function PlayerNotFound(res, playerId) {
  return res.status(404).type('text').send(`No player found with that ID ${playerId}`);
}


function authenticate(req, res, next) {
  // Ensure the header is present.
  const authorization = req.get('Authorization');
  if (!authorization) {
    return res.status(401).send('Authorization header is missing');
  }
  // Check that the header has the correct format.
  const match = authorization.match(/^Bearer (.+)$/);
  if (!match) {
    return res.status(401).send('Authorization header is not a bearer token');
  }
  // Extract and verify the JWT.
  const token = match[1];
  jwt.verify(token, secretKey, function(err, payload) {
    if (err) {
      return res.status(401).send('Your token is invalid or has expired');
    } else {
      req.currentUserId = payload.sub;
      next(); // Pass the ID of the authenticated user to the next middleware.
    }
  });
}

 // Pagination function
function getPaginationParameters (req) {

  // Parse the "page" URL query parameter indicating the index of the first element that should be in the response
  let page = parseInt(req.query.page, 10);
  if (isNaN(page) || page < 1) {
    page = 1;
  }

  // Parse the "pageSize" URL query parameter indicating how many elements should be in the response
  let pageSize = parseInt(req.query.pageSize, 10);
  if (isNaN(pageSize) || pageSize < 0 || pageSize > 100) {
    pageSize = 100;
  }

  return { page, pageSize };
}; 

function addLinkHeader(resourceHref, page, pageSize, total, res) {

  const links = {};
  const url = config.baseUrl + resourceHref;
  const maxPage = Math.ceil(total / pageSize);

  // Add first & prev links if current page is not the first one
  if (page > 1) {
    links.first = { rel: 'first', url: `${url}?page=1&pageSize=${pageSize}` };
    links.prev = { rel: 'prev', url: `${url}?page=${page - 1}&pageSize=${pageSize}` };
  }

  // Add next & last links if current page is not the last one
  if (page < maxPage) {
    links.next = { rel: 'next', url: `${url}?page=${page + 1}&pageSize=${pageSize}` };
    links.last = { rel: 'last', url: `${url}?page=${maxPage}&pageSize=${pageSize}` };
  }

  // If there are any links (i.e. if there is more than one page),
  // add the Link header to the response
  if (Object.keys(links).length >= 1) {
    res.set('Link', formatLinkHeader(links));
  }
}


/**
 * @apiDefine PlayerIdInUrlPath
 * @apiParam (URL path parameters) {String} id The unique identifier of the player
 */

/**
 * @apiDefine PlayerInRequestBody
 * @apiParam (Request body) {String{3..200}} firstName The first name of the player
 * @apiParam (Request body) {String{3..200}} lastName The last name of the player
 * @apiParam (Request body) {String{3..200}} pseudo The pseudo the player can choose (must be unique)
 * @apiParam (Request body) {String} password The password of the player
 * @apiParam (Request body) {String} [birthDate] birthDate The day the player was born
 * @apiParam (Request body) {string} picture Link to a picture who show who is the player
*/

/**
 * @apiDefine PlayerInResponseBody
 * @apiSuccess (Response body) {String} id The unique identifier of the player
 * @apiSuccess (Response body) {String} firstName The first name of the player
 * @apiSuccess (Response body) {String} lastName The last name of the player
 * @apiSuccess (Response body) {String} pseudo The pseudo the player can choose (must be unique)
 * @apiSuccess (Response body) {Date} birthDate The day the player was born
 * @apiSuccess (Response body) {String} picture Link to a picture who show who is the player
 * @apiSuccess (Response body) {Date} createdAt The date at which the player was registered
*/



/**
 * @apiDefine PlayerNotFoundError
 *
 * @apiError {Object} 404/NotFound No player was found corresponding to the ID in the URL path
 *
 * @apiErrorExample {json} 404 Not Found
 *     HTTP/1.1 404 Not Found
 *     Content-Type: text/plain
 *
 *     No player found with ID 58b4326f5e1def0123e97281
 */

/**
 * @apiDefine PlayerValidationError
 *
 * @apiError {Object} 422/UnprocessableEntity Some of the player's properties are invalid
 *
 * @apiErrorExample {json} 422 Unprocessable Entity
 *     HTTP/1.1 422 Unprocessable Entity
 *     Content-Type: application/json
 *
 *     {
 *       "message": "Player validation failed",
 *       "errors": {
 *         "title": {
 *           "kind": "minlength",
 *           "message": "Path `firstName` (`0`) is shorter than the minimum allowed length (3).",
 *           "name": "ValidatorError",
 *           "path": "firstName",
 *           "properties": {
 *             "message": "Path `{PATH}` (`{VALUE}`) is shorter than the minimum allowed length (3).",
 *             "minlength": 3,
 *             "path": "firstName",
 *             "type": "minlength",
 *             "value": "0"
 *           },
 *           "value": "0"
 *         }
 *       }
 *     }
 */


module.exports = playerRouter;